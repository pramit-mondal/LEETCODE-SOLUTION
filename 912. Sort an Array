class Solution {
public:
  
  void merge(vector<int>& arr,int l,int mid,int r)
  {
    int n1=mid-l+1,n2=r-mid;
    int la[n1],ra[n2];
    for(int i=0;i<n1;i++)
    {
        la[i]=arr[l+i];
    }
    for(int i=0;i<n2;i++)
    {
        ra[i]=arr[mid+1+i];
    }
    int i=0,j=0,k=l;
    while(i<n1 && j<n2)
    {
        if(la[i]<ra[j])
        {
            arr[k]=la[i];
            i++;k++;
        }
        else
        {
            arr[k]=ra[j];
            j++;k++;
        }
    }
    while(i<n1)
    {
        arr[k]=la[i];
        i++;k++;
    }
    while(j<n2)
    {
        arr[k]=ra[j];
        j++;k++;
    }
  }
  void Mergesort(vector<int>& arr,int l,int r){
    if(l<r)
    {
        int mid=(l+r)/2;
        Mergesort(arr,l,mid);
        Mergesort(arr,mid+1,r);
        merge(arr,l,mid,r);
    }
  }
      vector<int> sortArray(vector<int>& nums) {
      int i;
      vector<int> result;
      for(i=0;i<nums.size();i++)
       {
        result.push_back(nums[i]);
       }
    
        Mergesort(result,0,nums.size()-1);
        return result;
     }
};
